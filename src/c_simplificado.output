State 29 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: declarations

    2 declarations: declarations TIPO declaration
    3             | TIPO declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: ID SEMICOLON
    7                | ID '[' NUM ']' SEMICOLON

    8 fun_declaration: ID '(' params ')' compound_statement

    9 params: %empty
   10       | param_list

   11 param_list: param_list ',' TIPO param
   12           | TIPO param

   13 param: ID
   14      | ID '[' ']'

   15 compound_statement: '{' local_declarations statement_list '}'

   16 local_declarations: %empty
   17                   | local_declarations var_declaration

   18 statement_list: %empty
   19               | statement_list statement

   20 statement: expression_statement
   21          | conditional_statement
   22          | iteration_statement
   23          | "return" return_statement

   24 expression_statement: expression SEMICOLON

   25 conditional_statement: "if" '(' expression ')' compound_statement
   26                      | "if" '(' expression ')' compound_statement "else" compound_statement

   27 iteration_statement: "while" '(' expression ')' compound_statement

   28 return_statement: expression SEMICOLON
   29                 | SEMICOLON

   30 expression: var '=' expression
   31           | simple_expression

   32 var: ID
   33    | ID '[' expression ']'

   34 simple_expression: op_expression relop op_expression
   35                  | op_expression

   36 relop: "<="
   37      | "<"
   38      | ">"
   39      | ">="
   40      | "=="
   41      | "!="

   42 op_expression: op_expression op term
   43              | term

   44 op: '+'
   45   | '-'
   46   | '*'
   47   | '/'

   48 term: '(' expression ')'
   49     | var
   50     | NUM


Terminals, with rules where they appear

$end (0) 0
'(' (40) 8 25 26 27 48
')' (41) 8 25 26 27 48
'*' (42) 46
'+' (43) 44
',' (44) 11
'-' (45) 45
'/' (47) 47
'=' (61) 30
'[' (91) 7 14 33
']' (93) 7 14 33
'{' (123) 15
'}' (125) 15
error (256)
SEMICOLON (258) 6 7 24 28 29
ID (259) 6 7 8 13 14 32 33
TIPO (260) 2 3 11 12
NUM (261) 7 50
"return" (262) 23
"if" (263) 25 26
"else" (264) 26
"while" (265) 27
"<=" (266) 36
"<" (267) 37
">" (268) 38
">=" (269) 39
"==" (270) 40
"!=" (271) 41


Nonterminals, with rules where they appear

$accept (29)
    on left: 0
prog (30)
    on left: 1, on right: 0
declarations (31)
    on left: 2 3, on right: 1 2
declaration (32)
    on left: 4 5, on right: 2 3
var_declaration (33)
    on left: 6 7, on right: 4 17
fun_declaration (34)
    on left: 8, on right: 5
params (35)
    on left: 9 10, on right: 8
param_list (36)
    on left: 11 12, on right: 10 11
param (37)
    on left: 13 14, on right: 11 12
compound_statement (38)
    on left: 15, on right: 8 25 26 27
local_declarations (39)
    on left: 16 17, on right: 15 17
statement_list (40)
    on left: 18 19, on right: 15 19
statement (41)
    on left: 20 21 22 23, on right: 19
expression_statement (42)
    on left: 24, on right: 20
conditional_statement (43)
    on left: 25 26, on right: 21
iteration_statement (44)
    on left: 27, on right: 22
return_statement (45)
    on left: 28 29, on right: 23
expression (46)
    on left: 30 31, on right: 24 25 26 27 28 30 33 48
var (47)
    on left: 32 33, on right: 30 49
simple_expression (48)
    on left: 34 35, on right: 31
relop (49)
    on left: 36 37 38 39 40 41, on right: 34
op_expression (50)
    on left: 42 43, on right: 34 35 42
op (51)
    on left: 44 45 46 47, on right: 42
term (52)
    on left: 48 49 50, on right: 42 43


State 0

    0 $accept: . prog $end
    1 prog: . declarations
    2 declarations: . declarations TIPO declaration
    3             | . TIPO declaration

    TIPO  shift, and go to state 1

    prog          go to state 2
    declarations  go to state 3


State 1

    3 declarations: TIPO . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . ID SEMICOLON
    7                | . ID '[' NUM ']' SEMICOLON
    8 fun_declaration: . ID '(' params ')' compound_statement

    ID  shift, and go to state 4

    declaration      go to state 5
    var_declaration  go to state 6
    fun_declaration  go to state 7


State 2

    0 $accept: prog . $end

    $end  shift, and go to state 8


State 3

    1 prog: declarations .  [$end]
    2 declarations: declarations . TIPO declaration

    TIPO  shift, and go to state 9

    $default  reduce using rule 1 (prog)


State 4

    6 var_declaration: ID . SEMICOLON
    7                | ID . '[' NUM ']' SEMICOLON
    8 fun_declaration: ID . '(' params ')' compound_statement

    SEMICOLON  shift, and go to state 10
    '['        shift, and go to state 11
    '('        shift, and go to state 12


State 5

    3 declarations: TIPO declaration .

    $default  reduce using rule 3 (declarations)


State 6

    4 declaration: var_declaration .

    $default  reduce using rule 4 (declaration)


State 7

    5 declaration: fun_declaration .

    $default  reduce using rule 5 (declaration)


State 8

    0 $accept: prog $end .

    $default  accept


State 9

    2 declarations: declarations TIPO . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . ID SEMICOLON
    7                | . ID '[' NUM ']' SEMICOLON
    8 fun_declaration: . ID '(' params ')' compound_statement

    ID  shift, and go to state 4

    declaration      go to state 13
    var_declaration  go to state 6
    fun_declaration  go to state 7


State 10

    6 var_declaration: ID SEMICOLON .

    $default  reduce using rule 6 (var_declaration)


State 11

    7 var_declaration: ID '[' . NUM ']' SEMICOLON

    NUM  shift, and go to state 14


State 12

    8 fun_declaration: ID '(' . params ')' compound_statement
    9 params: . %empty  [')']
   10       | . param_list
   11 param_list: . param_list ',' TIPO param
   12           | . TIPO param

    TIPO  shift, and go to state 15

    $default  reduce using rule 9 (params)

    params      go to state 16
    param_list  go to state 17


State 13

    2 declarations: declarations TIPO declaration .

    $default  reduce using rule 2 (declarations)


State 14

    7 var_declaration: ID '[' NUM . ']' SEMICOLON

    ']'  shift, and go to state 18


State 15

   12 param_list: TIPO . param
   13 param: . ID
   14      | . ID '[' ']'

    ID  shift, and go to state 19

    param  go to state 20


State 16

    8 fun_declaration: ID '(' params . ')' compound_statement

    ')'  shift, and go to state 21


State 17

   10 params: param_list .  [')']
   11 param_list: param_list . ',' TIPO param

    ','  shift, and go to state 22

    $default  reduce using rule 10 (params)


State 18

    7 var_declaration: ID '[' NUM ']' . SEMICOLON

    SEMICOLON  shift, and go to state 23


State 19

   13 param: ID .  [')', ',']
   14      | ID . '[' ']'

    '['  shift, and go to state 24

    $default  reduce using rule 13 (param)


State 20

   12 param_list: TIPO param .

    $default  reduce using rule 12 (param_list)


State 21

    8 fun_declaration: ID '(' params ')' . compound_statement
   15 compound_statement: . '{' local_declarations statement_list '}'

    '{'  shift, and go to state 25

    compound_statement  go to state 26


State 22

   11 param_list: param_list ',' . TIPO param

    TIPO  shift, and go to state 27


State 23

    7 var_declaration: ID '[' NUM ']' SEMICOLON .

    $default  reduce using rule 7 (var_declaration)


State 24

   14 param: ID '[' . ']'

    ']'  shift, and go to state 28


State 25

   15 compound_statement: '{' . local_declarations statement_list '}'
   16 local_declarations: . %empty
   17                   | . local_declarations var_declaration

    $default  reduce using rule 16 (local_declarations)

    local_declarations  go to state 29


State 26

    8 fun_declaration: ID '(' params ')' compound_statement .

    $default  reduce using rule 8 (fun_declaration)


State 27

   11 param_list: param_list ',' TIPO . param
   13 param: . ID
   14      | . ID '[' ']'

    ID  shift, and go to state 19

    param  go to state 30


State 28

   14 param: ID '[' ']' .

    $default  reduce using rule 14 (param)


State 29

    6 var_declaration: . ID SEMICOLON
    7                | . ID '[' NUM ']' SEMICOLON
   15 compound_statement: '{' local_declarations . statement_list '}'
   17 local_declarations: local_declarations . var_declaration
   18 statement_list: . %empty  [ID, NUM, '(', '}', "return", "if", "while"]
   19               | . statement_list statement

    ID  shift, and go to state 31

    ID        [reduce using rule 18 (statement_list)]
    $default  reduce using rule 18 (statement_list)

    var_declaration  go to state 32
    statement_list   go to state 33


State 30

   11 param_list: param_list ',' TIPO param .

    $default  reduce using rule 11 (param_list)


State 31

    6 var_declaration: ID . SEMICOLON
    7                | ID . '[' NUM ']' SEMICOLON

    SEMICOLON  shift, and go to state 10
    '['        shift, and go to state 11


State 32

   17 local_declarations: local_declarations var_declaration .

    $default  reduce using rule 17 (local_declarations)


State 33

   15 compound_statement: '{' local_declarations statement_list . '}'
   19 statement_list: statement_list . statement
   20 statement: . expression_statement
   21          | . conditional_statement
   22          | . iteration_statement
   23          | . "return" return_statement
   24 expression_statement: . expression SEMICOLON
   25 conditional_statement: . "if" '(' expression ')' compound_statement
   26                      | . "if" '(' expression ')' compound_statement "else" compound_statement
   27 iteration_statement: . "while" '(' expression ')' compound_statement
   30 expression: . var '=' expression
   31           | . simple_expression
   32 var: . ID
   33    | . ID '[' expression ']'
   34 simple_expression: . op_expression relop op_expression
   35                  | . op_expression
   42 op_expression: . op_expression op term
   43              | . term
   48 term: . '(' expression ')'
   49     | . var
   50     | . NUM

    ID        shift, and go to state 34
    NUM       shift, and go to state 35
    '('       shift, and go to state 36
    '}'       shift, and go to state 37
    "return"  shift, and go to state 38
    "if"      shift, and go to state 39
    "while"   shift, and go to state 40

    statement              go to state 41
    expression_statement   go to state 42
    conditional_statement  go to state 43
    iteration_statement    go to state 44
    expression             go to state 45
    var                    go to state 46
    simple_expression      go to state 47
    op_expression          go to state 48
    term                   go to state 49


State 34

   32 var: ID .  [SEMICOLON, '+', '-', '*', '/', ']', ')', '=', "<=", "<", ">", ">=", "==", "!="]
   33    | ID . '[' expression ']'

    '['  shift, and go to state 50

    $default  reduce using rule 32 (var)


State 35

   50 term: NUM .

    $default  reduce using rule 50 (term)


State 36

   30 expression: . var '=' expression
   31           | . simple_expression
   32 var: . ID
   33    | . ID '[' expression ']'
   34 simple_expression: . op_expression relop op_expression
   35                  | . op_expression
   42 op_expression: . op_expression op term
   43              | . term
   48 term: . '(' expression ')'
   48     | '(' . expression ')'
   49     | . var
   50     | . NUM

    ID   shift, and go to state 34
    NUM  shift, and go to state 35
    '('  shift, and go to state 36

    expression         go to state 51
    var                go to state 46
    simple_expression  go to state 47
    op_expression      go to state 48
    term               go to state 49


State 37

   15 compound_statement: '{' local_declarations statement_list '}' .

    $default  reduce using rule 15 (compound_statement)


State 38

   23 statement: "return" . return_statement
   28 return_statement: . expression SEMICOLON
   29                 | . SEMICOLON
   30 expression: . var '=' expression
   31           | . simple_expression
   32 var: . ID
   33    | . ID '[' expression ']'
   34 simple_expression: . op_expression relop op_expression
   35                  | . op_expression
   42 op_expression: . op_expression op term
   43              | . term
   48 term: . '(' expression ')'
   49     | . var
   50     | . NUM

    SEMICOLON  shift, and go to state 52
    ID         shift, and go to state 34
    NUM        shift, and go to state 35
    '('        shift, and go to state 36

    return_statement   go to state 53
    expression         go to state 54
    var                go to state 46
    simple_expression  go to state 47
    op_expression      go to state 48
    term               go to state 49


State 39

   25 conditional_statement: "if" . '(' expression ')' compound_statement
   26                      | "if" . '(' expression ')' compound_statement "else" compound_statement

    '('  shift, and go to state 55


State 40

   27 iteration_statement: "while" . '(' expression ')' compound_statement

    '('  shift, and go to state 56


State 41

   19 statement_list: statement_list statement .

    $default  reduce using rule 19 (statement_list)


State 42

   20 statement: expression_statement .

    $default  reduce using rule 20 (statement)


State 43

   21 statement: conditional_statement .

    $default  reduce using rule 21 (statement)


State 44

   22 statement: iteration_statement .

    $default  reduce using rule 22 (statement)


State 45

   24 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 57


State 46

   30 expression: var . '=' expression
   49 term: var .  [SEMICOLON, '+', '-', '*', '/', ']', ')', "<=", "<", ">", ">=", "==", "!="]

    '='  shift, and go to state 58

    $default  reduce using rule 49 (term)


State 47

   31 expression: simple_expression .

    $default  reduce using rule 31 (expression)


State 48

   34 simple_expression: op_expression . relop op_expression
   35                  | op_expression .  [SEMICOLON, ']', ')']
   36 relop: . "<="
   37      | . "<"
   38      | . ">"
   39      | . ">="
   40      | . "=="
   41      | . "!="
   42 op_expression: op_expression . op term
   44 op: . '+'
   45   | . '-'
   46   | . '*'
   47   | . '/'

    '+'   shift, and go to state 59
    '-'   shift, and go to state 60
    '*'   shift, and go to state 61
    '/'   shift, and go to state 62
    "<="  shift, and go to state 63
    "<"   shift, and go to state 64
    ">"   shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "!="  shift, and go to state 68

    $default  reduce using rule 35 (simple_expression)

    relop  go to state 69
    op     go to state 70


State 49

   43 op_expression: term .

    $default  reduce using rule 43 (op_expression)


State 50

   30 expression: . var '=' expression
   31           | . simple_expression
   32 var: . ID
   33    | . ID '[' expression ']'
   33    | ID '[' . expression ']'
   34 simple_expression: . op_expression relop op_expression
   35                  | . op_expression
   42 op_expression: . op_expression op term
   43              | . term
   48 term: . '(' expression ')'
   49     | . var
   50     | . NUM

    ID   shift, and go to state 34
    NUM  shift, and go to state 35
    '('  shift, and go to state 36

    expression         go to state 71
    var                go to state 46
    simple_expression  go to state 47
    op_expression      go to state 48
    term               go to state 49


State 51

   48 term: '(' expression . ')'

    ')'  shift, and go to state 72


State 52

   29 return_statement: SEMICOLON .

    $default  reduce using rule 29 (return_statement)


State 53

   23 statement: "return" return_statement .

    $default  reduce using rule 23 (statement)


State 54

   28 return_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 73


State 55

   25 conditional_statement: "if" '(' . expression ')' compound_statement
   26                      | "if" '(' . expression ')' compound_statement "else" compound_statement
   30 expression: . var '=' expression
   31           | . simple_expression
   32 var: . ID
   33    | . ID '[' expression ']'
   34 simple_expression: . op_expression relop op_expression
   35                  | . op_expression
   42 op_expression: . op_expression op term
   43              | . term
   48 term: . '(' expression ')'
   49     | . var
   50     | . NUM

    ID   shift, and go to state 34
    NUM  shift, and go to state 35
    '('  shift, and go to state 36

    expression         go to state 74
    var                go to state 46
    simple_expression  go to state 47
    op_expression      go to state 48
    term               go to state 49


State 56

   27 iteration_statement: "while" '(' . expression ')' compound_statement
   30 expression: . var '=' expression
   31           | . simple_expression
   32 var: . ID
   33    | . ID '[' expression ']'
   34 simple_expression: . op_expression relop op_expression
   35                  | . op_expression
   42 op_expression: . op_expression op term
   43              | . term
   48 term: . '(' expression ')'
   49     | . var
   50     | . NUM

    ID   shift, and go to state 34
    NUM  shift, and go to state 35
    '('  shift, and go to state 36

    expression         go to state 75
    var                go to state 46
    simple_expression  go to state 47
    op_expression      go to state 48
    term               go to state 49


State 57

   24 expression_statement: expression SEMICOLON .

    $default  reduce using rule 24 (expression_statement)


State 58

   30 expression: . var '=' expression
   30           | var '=' . expression
   31           | . simple_expression
   32 var: . ID
   33    | . ID '[' expression ']'
   34 simple_expression: . op_expression relop op_expression
   35                  | . op_expression
   42 op_expression: . op_expression op term
   43              | . term
   48 term: . '(' expression ')'
   49     | . var
   50     | . NUM

    ID   shift, and go to state 34
    NUM  shift, and go to state 35
    '('  shift, and go to state 36

    expression         go to state 76
    var                go to state 46
    simple_expression  go to state 47
    op_expression      go to state 48
    term               go to state 49


State 59

   44 op: '+' .

    $default  reduce using rule 44 (op)


State 60

   45 op: '-' .

    $default  reduce using rule 45 (op)


State 61

   46 op: '*' .

    $default  reduce using rule 46 (op)


State 62

   47 op: '/' .

    $default  reduce using rule 47 (op)


State 63

   36 relop: "<=" .

    $default  reduce using rule 36 (relop)


State 64

   37 relop: "<" .

    $default  reduce using rule 37 (relop)


State 65

   38 relop: ">" .

    $default  reduce using rule 38 (relop)


State 66

   39 relop: ">=" .

    $default  reduce using rule 39 (relop)


State 67

   40 relop: "==" .

    $default  reduce using rule 40 (relop)


State 68

   41 relop: "!=" .

    $default  reduce using rule 41 (relop)


State 69

   32 var: . ID
   33    | . ID '[' expression ']'
   34 simple_expression: op_expression relop . op_expression
   42 op_expression: . op_expression op term
   43              | . term
   48 term: . '(' expression ')'
   49     | . var
   50     | . NUM

    ID   shift, and go to state 34
    NUM  shift, and go to state 35
    '('  shift, and go to state 36

    var            go to state 77
    op_expression  go to state 78
    term           go to state 49


State 70

   32 var: . ID
   33    | . ID '[' expression ']'
   42 op_expression: op_expression op . term
   48 term: . '(' expression ')'
   49     | . var
   50     | . NUM

    ID   shift, and go to state 34
    NUM  shift, and go to state 35
    '('  shift, and go to state 36

    var   go to state 77
    term  go to state 79


State 71

   33 var: ID '[' expression . ']'

    ']'  shift, and go to state 80


State 72

   48 term: '(' expression ')' .

    $default  reduce using rule 48 (term)


State 73

   28 return_statement: expression SEMICOLON .

    $default  reduce using rule 28 (return_statement)


State 74

   25 conditional_statement: "if" '(' expression . ')' compound_statement
   26                      | "if" '(' expression . ')' compound_statement "else" compound_statement

    ')'  shift, and go to state 81


State 75

   27 iteration_statement: "while" '(' expression . ')' compound_statement

    ')'  shift, and go to state 82


State 76

   30 expression: var '=' expression .

    $default  reduce using rule 30 (expression)


State 77

   49 term: var .

    $default  reduce using rule 49 (term)


State 78

   34 simple_expression: op_expression relop op_expression .  [SEMICOLON, ']', ')']
   42 op_expression: op_expression . op term
   44 op: . '+'
   45   | . '-'
   46   | . '*'
   47   | . '/'

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 34 (simple_expression)

    op  go to state 70


State 79

   42 op_expression: op_expression op term .

    $default  reduce using rule 42 (op_expression)


State 80

   33 var: ID '[' expression ']' .

    $default  reduce using rule 33 (var)


State 81

   15 compound_statement: . '{' local_declarations statement_list '}'
   25 conditional_statement: "if" '(' expression ')' . compound_statement
   26                      | "if" '(' expression ')' . compound_statement "else" compound_statement

    '{'  shift, and go to state 25

    compound_statement  go to state 83


State 82

   15 compound_statement: . '{' local_declarations statement_list '}'
   27 iteration_statement: "while" '(' expression ')' . compound_statement

    '{'  shift, and go to state 25

    compound_statement  go to state 84


State 83

   25 conditional_statement: "if" '(' expression ')' compound_statement .  [ID, NUM, '(', '}', "return", "if", "while"]
   26                      | "if" '(' expression ')' compound_statement . "else" compound_statement

    "else"  shift, and go to state 85

    $default  reduce using rule 25 (conditional_statement)


State 84

   27 iteration_statement: "while" '(' expression ')' compound_statement .

    $default  reduce using rule 27 (iteration_statement)


State 85

   15 compound_statement: . '{' local_declarations statement_list '}'
   26 conditional_statement: "if" '(' expression ')' compound_statement "else" . compound_statement

    '{'  shift, and go to state 25

    compound_statement  go to state 86


State 86

   26 conditional_statement: "if" '(' expression ')' compound_statement "else" compound_statement .

    $default  reduce using rule 26 (conditional_statement)
